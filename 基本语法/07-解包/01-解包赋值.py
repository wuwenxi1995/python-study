# -*- coding: utf-8 -*-
# @Time    : 2025/5/21 21:54
# @Author  : wuwenxi

"""
解包赋值是 Python 中一种强大的特性，它允许你将一个可迭代对象中的元素分配给多个变量。这种操作可以简化代码并提高可读性。
Python 支持多种解包模式，包括简单的序列解包、嵌套解包以及使用星号（*）进行剩余项的收集

1. 简单的序列解包: 最基础的解包形式是将一个可迭代对象（如列表、元组等）中的元素一一对应地赋值给多个变量
2. 嵌套解包: 你可以对嵌套的可迭代对象进行解包
3. 使用星号收集剩余项：当解包的元素数量不确定或需要处理多余元素时，可以使用单个星号 (*) 来捕获剩余的元素为一个列表
4. 解包字典：从 Python 3.5 开始，字典也可以使用双星号 (**) 进行解包
5. 解构赋值：解构赋值允许你直接从复合数据结构中提取值，并将其分配给变量。这不仅限于简单的序列，还可以用于更复杂的数据结构
"""

# 序列解包
a, b, c = [1, 2, 3]
print(a, b, c)  # 输出: 1 2 3
x, y, z = (4, 5, 6)
print(x, y, z)  # 输出: 4 5 6

# 嵌套解包
print(10 * '*', '嵌套解包')
first, (second, third), fourth = ['a', ('b', 'c'), 'd']
print(first, second, third, fourth)  # 输出: a b c d

w, (x, y), z = (7, (8, 9), 10)
print(w, x, y, z)  # 输出: 7 8 9 10

x, (y1, y2), z, m1 = [1, (2, 3), 4, {"name": "tom", "age": 20}]
print(x, y1, y2, z, m1)  # ==> 输出：1 2 3 4 {'name': 'tom', 'age': 20}

x, y, z, m1 = [1, (2, 3), 4, {"name": "tom", "age": 20}]
print(x, y, z, m1)  # ==> 输出：1 (2, 3) 4 {'name': 'tom', 'age': 20}

# 使用星号收集剩余项
print(10 * '*', '使用星号收集剩余项')

# 使用 * 捕获中间的元素
first, *middle, last = [1, 2, 3, 4, 5]
print(first, middle, last)  # 输出: 1 [2, 3, 4] 5

# 使用 * 捕获所有但第一个和最后一个元素
head, *body, tail = (10, 20, 30, 40, 50)
print(head, body, tail)  # 输出: 10 [20, 30, 40] 50

# 使用 * 捕获所有元素作为列表
*a, = "hello"
print(a)  # 输出: ['h', 'e', 'l', 'l', 'o']

# 使用 * 捕获字典中的键
*d, = {"name": "Alice", "age": 30}
print(d)  # 输出: ['name', 'age']

print(10 * '*', '解析字典')

dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}

# 合并两个字典
combined = {**dict1, **dict2}
print(combined)  # 输出: {'a': 1, 'b': 3, 'c': 4}


# 在函数调用中解包字典作为关键字参数
def func(m, n, p):
    print(m, n, p)


func(**{'m': 1, 'n': 2, 'p': 3})
